# Be sure to restart your web server when you modify this file.

# Uncomment below to force Rails into production mode when 
# you don't control web/app server and can't set it the proper way
# ENV['RAILS_ENV'] ||= 'production'

# Specifies gem version of Rails to use when vendor/rails is not present
RAILS_GEM_VERSION = '2.1.0' unless defined? RAILS_GEM_VERSION

# Bootstrap the Rails environment, frameworks, and default configuration
require File.join(File.dirname(__FILE__), 'boot')

# Bring in our own application settings config YAML (leaving it for now)
require 'yaml'
SETTINGS = YAML::load(IO.read("#{RAILS_ROOT}/config/settings.yml"))

Rails::Initializer.run do |config|
  # Settings in config/environments/* take precedence over those specified here
  
  # Skip frameworks you're not going to use (only works if using vendor/rails)
  # config.frameworks -= [ :action_web_service, :action_mailer ]

  # Only load the plugins named here, by default all plugins in vendor/plugins are loaded
  # config.plugins = %W( exception_notification ssl_requirement )

  # Add additional load paths for your own custom dirs
  # config.load_paths += %W( #{RAILS_ROOT}/extras )

  # Force all environments to use the same logger level 
  # (by default production uses :info, the others :debug)
  # config.log_level = :debug

  # Use the database for sessions instead of the file system
  # (create the session table with 'rake db:sessions:create')
  # config.action_controller.session_store = :active_record_store

  # Use SQL instead of Active Record's schema dumper when creating the test database.
  # This is necessary if your schema can't be completely dumped by the schema dumper, 
  # like if you have constraints or database-specific column types
  # config.active_record.schema_format = :sql

  # Activate observers that should always be running
  # config.active_record.observers = :cacher, :garbage_collector

  # Make Active Record use UTC-base instead of local time
  # config.active_record.default_timezone = :utc
  
  # See Rails::Configuration for more options
  config.action_mailer.smtp_settings = {
    :address => "smtp.gmail.com",
    :port => 587,
    :domain => "localhost",
    :authentication => :plain,
    :user_name => SETTINGS['gmail']['username'],
    :password => SETTINGS['gmail']['password']
  }
  
  # Keep logfiles managable and under control, should limit it to 50 1MB files
  # See: http://blog.caboo.se/articles/2005/12/15/who-said-size-is-not-important
  config.logger = Logger.new(config.log_path, 50, 1024**2)
  
  # Keep cache sweepers and cached pages in their own directories
  # See: http://www.railsenvy.com/2007/2/28/rails-caching-tutorial
  config.load_paths += ["#{RAILS_ROOT}/app/sweepers"]
  # config.action_controller.page_cache_directory = "#{RAILS_ROOT}/public/cache/"

  # New session config stuff for Rails 2.0.2 (secret generated by rake secret)
  config.action_controller.session = {
    :session_key => '_mtarbit_weblog_session',
    :secret      => '7dd46847a9dcee02f0c9663981bd0b5f24b614ec3f540ade1c87792c5702'
  }

end



# Add new inflection rules using the following format 
# (all these examples are active by default):
# Inflector.inflections do |inflect|
#   inflect.plural /^(ox)$/i, '\1en'
#   inflect.singular /^(ox)en/i, '\1'
#   inflect.irregular 'person', 'people'
#   inflect.uncountable %w( fish sheep )
# end

# Add new mime types for use in respond_to blocks:
# Mime::Type.register "text/richtext", :rtf
# Mime::Type.register "application/x-mobile", :mobile

# Include your application configuration below


# Override BlueCloth code block handling
class BlueCloth

  def escape_shell_arg(str)
    "'%s'" % str.gsub("'","'\\\\''")
  end

  def transform_code_blocks(str, rs)
    @log.debug " Transforming code blocks"

    str.gsub(CodeBlockRegexp) {|block|
      code,rest = $1,$2

      # Remove the syntax line and extract the language from it
      regx = /(?:[ ]{4}|\t)+@@(.*)\n+/
      lang = code.slice!(regx).slice(regx,1)

      # Call out to pygmentize to markup the code for highlighting
      code = `echo #{escape_shell_arg(code)} | #{escape_shell_arg(SETTINGS['pygmentize_path'])} -f html -l #{escape_shell_arg(lang)}`

      # Remove the extraneous wrapper markup that we're not using
      code.sub!(/<div class="highlight"><pre>(.*)<\/pre><\/div>/m, '\1')

      # Generate the codeblock
      %{\n\n<pre class="code"><code>%s\n</code></pre>\n\n%s} % [ outdent(code).rstrip, rest ]
    }
  end

=begin
  alias old_transform_code_blocks transform_code_blocks

  def transform_code_blocks(str, rs)
    str = old_transform_code_blocks(str, rs)
    str.gsub!(/<code>@@(.*)\n+/, '<code class="\1">')
    return str
  end
=end

end

